<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>闲碎</title>
    <link>https://hxxxer.github.io/</link>
    <description>Recent content on 闲碎</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Sun, 19 Jan 2025 17:32:47 +0800</lastBuildDate>
    
        <atom:link href="https://hxxxer.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>WPF中使用ctrl多选的bug</title>
        <link>https://hxxxer.github.io/wpf%E4%B8%AD%E4%BD%BF%E7%94%A8ctrl%E5%A4%9A%E9%80%89%E7%9A%84bug/</link>
        <pubDate>Sun, 19 Jan 2025 17:32:47 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/wpf%E4%B8%AD%E4%BD%BF%E7%94%A8ctrl%E5%A4%9A%E9%80%89%E7%9A%84bug/</guid>
        <description>闲碎 https://hxxxer.github.io/wpf%E4%B8%AD%E4%BD%BF%E7%94%A8ctrl%E5%A4%9A%E9%80%89%E7%9A%84bug/ -&lt;p&gt;&lt;strong&gt;最后编辑于2025年01月19日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;好久没写blog了，近期挺忙的。&lt;/p&gt;
&lt;p&gt;这次是在尝试在C#下的另一个桌面开发框架WPF中开发一个小程序时，遇到的一个小bug，纯纯是我自己没理解Preview事件导致的。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;背景知识记录&#34;&gt;背景知识记录&lt;/h1&gt;
&lt;p&gt;Drag-and-drop操作过程中，会由一系列事件Event组成，这些Event有两种模型，一个是冒泡Bubbling，一个是隧道Tunnelling（带Preview前缀的）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bubbling的event是动作发生后触发；Tunnelling的event是动作发生前触发。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;冒泡事件&#34;&gt;冒泡事件&lt;/h2&gt;
&lt;p&gt;从最具体的子元素开始，逐层向上冒泡到父元素。如果子元素处理了事件并设置了 e.Handled = true，则父元素不会接收到该事件。&lt;/p&gt;
&lt;h2 id=&#34;隧道事件&#34;&gt;隧道事件&lt;/h2&gt;
&lt;p&gt;从最不具体的父元素开始，逐层向下传递到子元素。如果父元素处理了事件并设置了 e.Handled = true，则子元素不会接收到该事件。&lt;/p&gt;
&lt;h1 id=&#34;bug场景复现&#34;&gt;bug场景复现&lt;/h1&gt;
&lt;p&gt;我在一个ListBox里面设置了Extended多选，即可以通过按住ctrl来实现多选，这个多选事件是发生在我自己的PreviewMouseLeftButtonDown事件之后的（但是不清除它是冒泡还是隧道事件）。而我的PreviewMouseLeftButtonDown事件里面设定了如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 选中当前项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;listBoxItem.IsSelected = &lt;span style=&#34;color:#ef9f76&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e.Handled = &lt;span style=&#34;color:#ef9f76&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当时拖动文件的代码是写在PreviewMouseLeftButtonDown事件里面的，而拖动文件的操作是阻塞的。我这样写是为了在拖动子项时，子项能变成选中状态。&lt;/p&gt;
&lt;p&gt;然后我就发现按住ctrl无法使已选中的项变成未选中。想了一下，应该是因为&lt;code&gt;e.Handled = true&lt;/code&gt;，使得接下来按住ctrl选择没有接收到点击事件，但是当我删除&lt;code&gt;e.Handled = true&lt;/code&gt;之后，依然存在bug：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按住ctrl可以使已选中的项变成未选中&lt;/li&gt;
&lt;li&gt;但是按住ctrl无法使未选中的项变成已选中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;bug原因&#34;&gt;bug原因&lt;/h1&gt;
&lt;p&gt;后来经过我的分析之后，得出了原因：&lt;code&gt;listBoxItem.IsSelected = true&lt;/code&gt;和ctrl多选依次发生，导致出现bug。这个过程可以如下描述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点击之后，&lt;code&gt;listBoxItem.IsSelected = true&lt;/code&gt;正常发生，这时子项被选中。&lt;/li&gt;
&lt;li&gt;当PreviewMouseLeftButtonDown事件结束之后，ctrl多选发生，它会改变子项的选中状态，可以理解为进行了非操作。&lt;/li&gt;
&lt;li&gt;最后子项的选中状态是&lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以ctrl多选就只能使子项变成非选中状态。&lt;/p&gt;
&lt;h1 id=&#34;解决方法&#34;&gt;解决方法&lt;/h1&gt;
&lt;p&gt;解决也很简单，只需要将拖动文件的代码转移到MouseMove事件里面，并删除上面的两行代码即可。&lt;/p&gt;
&lt;p&gt;因为拖动文件的代码在MouseMove事件里面，所以PreviewMouseLeftButtonDown事件不再会阻塞ctrl多选的事件，这样ctrl多选的各种行为也能正常发生了。&lt;/p&gt;
&lt;h1 id=&#34;最后总结&#34;&gt;最后总结&lt;/h1&gt;
&lt;p&gt;Preview事件里面不要放一些会阻塞的代码，最好只放一些检查、记录的代码。我这里就改成记录选中项和鼠标位置了。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/mqxs/p/7534730.html&#34;&gt;【WPF】鼠标拖拽功能DragOver和Drop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/lesliexin/p/16073879.html&#34;&gt;（原创）[C#] 一步一步自定义拖拽（Drag&amp;amp;Drop）时的鼠标效果：（一）基本原理及基本实现
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kimi.moonshot.cn/&#34;&gt;Kimi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/wpf%E4%B8%AD%E4%BD%BF%E7%94%A8ctrl%E5%A4%9A%E9%80%89%E7%9A%84bug/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>C# ToString的使用</title>
        <link>https://hxxxer.github.io/c%23-tostring%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Sun, 17 Nov 2024 01:04:14 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/c%23-tostring%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>闲碎 https://hxxxer.github.io/c%23-tostring%E7%9A%84%E4%BD%BF%E7%94%A8/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月17日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在看一篇有关获取图标的博客的时候，看到了这个将数值转字符串的函数，就记录一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;常见使用方法&#34;&gt;常见使用方法&lt;/h1&gt;
&lt;p&gt;可以直接使用一个字母字符代表转换模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;C{x}&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 货币模式，x代表保留几位小数，默认两位&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;D{x}&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 十进制，x代表有几位数，比如x为3，15就转换为015&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;E{x}&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 科学计数法，x代表底数保留几位小数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;F{x}&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 小数，x代表底数保留几位小数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 直接转换&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;N{x}&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 使用 , 作为分隔符，x代表保留几位小数，默认两位&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;X{x}&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 十六进制，x代表有几位数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以使用多个&lt;strong&gt;0&lt;/strong&gt;代表转换模式，例子直接说明（Assert.AreEqual()是断言函数，就是判断）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#ca9ee6&#34;&gt;value&lt;/span&gt; = &lt;span style=&#34;color:#ef9f76&#34;&gt;67.89&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assert.AreEqual(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;68&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ca9ee6&#34;&gt;value&lt;/span&gt;.ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assert.AreEqual(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;68&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ca9ee6&#34;&gt;value&lt;/span&gt;.ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;00&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assert.AreEqual(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;068&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ca9ee6&#34;&gt;value&lt;/span&gt;.ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;000&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assert.AreEqual(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;067.9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ca9ee6&#34;&gt;value&lt;/span&gt;.ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;000.0&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assert.AreEqual(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;067.89&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ca9ee6&#34;&gt;value&lt;/span&gt;.ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;000.00&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assert.AreEqual(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;067.890&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ca9ee6&#34;&gt;value&lt;/span&gt;.ToString(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;000.000&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个模式和上面的模式中的部分都可以四舍五入。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.org.cn/questions/17937487&#34;&gt;c# - C# ToString(&amp;ldquo;00&amp;rdquo;) 歧义&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/dmlk31/article/details/111206738&#34;&gt;C# 之 ToString() 格式化全说明&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/c%23-tostring%E7%9A%84%E4%BD%BF%E7%94%A8/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>CSS实现文本渐变消失</title>
        <link>https://hxxxer.github.io/css%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%B8%90%E5%8F%98%E6%B6%88%E5%A4%B1/</link>
        <pubDate>Thu, 14 Nov 2024 01:45:42 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/css%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%B8%90%E5%8F%98%E6%B6%88%E5%A4%B1/</guid>
        <description>闲碎 https://hxxxer.github.io/css%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%B8%90%E5%8F%98%E6%B6%88%E5%A4%B1/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月14日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在搞博客搜索的时候，由于摘要只截了120个字符，导致我想在末尾加个省略号，加完之后又想加一个渐变消失的效果。&lt;/p&gt;
&lt;p&gt;虽然最后也没有加上😂。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;代码展示&#34;&gt;代码展示&lt;/h1&gt;
&lt;p&gt;下面是文本html：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;wraps&amp;#34;&lt;/span&gt;&amp;gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;lt;/&lt;span style=&#34;color:#ca9ee6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是从左到右，渐渐消失的效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#e5c890&#34;&gt;wraps&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;-webkit-&lt;/span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;mask-image&lt;/span&gt;: &lt;span style=&#34;color:#ca9ee6&#34;&gt;-webkit-&lt;/span&gt;&lt;span style=&#34;color:#99d1db&#34;&gt;linear-gradient&lt;/span&gt;(&lt;span style=&#34;color:#ef9f76&#34;&gt;right&lt;/span&gt;, &lt;span style=&#34;color:#99d1db&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#99d1db&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ef9f76&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ef9f76&#34;&gt;70&lt;/span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;%&lt;/span&gt;); 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;&amp;lt;!--&lt;/span&gt;	&lt;span style=&#34;color:#ca9ee6&#34;&gt;background&lt;/span&gt;: &lt;span style=&#34;color:#ef9f76&#34;&gt;#fff&lt;/span&gt;;&lt;span style=&#34;color:#e78284&#34;&gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ef9f76&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ef9f76&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;&amp;lt;!--&lt;/span&gt;	&lt;span style=&#34;color:#ca9ee6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#ef9f76&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;red&lt;/span&gt;;&lt;span style=&#34;color:#e78284&#34;&gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改成从右到左只需要将上面css代码第二行的right改成left即可。&lt;/p&gt;
&lt;h1 id=&#34;代码解释&#34;&gt;代码解释&lt;/h1&gt;
&lt;p&gt;像&lt;code&gt;background&lt;/code&gt;、&lt;code&gt;width&lt;/code&gt;、&lt;code&gt;height&lt;/code&gt;就纯纯一看便知，而border是指一个框的效果；真正要解释的就第二行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-webkit-mask-image&lt;/code&gt;是类似于ps的蒙版效果，蒙版上越黑越透明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-webkit-linear-gradient&lt;/code&gt;是生成一种或多种颜色进行线性过渡的效果的图像，第一个参数是方向，后面的是颜色。以从左到右渐渐消失的为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方向为右，意味着是从右边开始，由第一种颜色向第二种颜色过渡。&lt;/li&gt;
&lt;li&gt;rgba的第四个参数是&lt;strong&gt;不透明度&lt;/strong&gt;，默认为1，即不透明。&lt;/li&gt;
&lt;li&gt;颜色参数后面那个百分数，意思是从方向上的路径的多少。比如right+30%就是以最左边为起点（0%），向右30%。&lt;/li&gt;
&lt;li&gt;根据上面3点，可以得出效果如下图所示：
&lt;img src=&#34;https://hxxxer.github.io/images/%E9%BB%91%E7%99%BD%E8%BF%87%E6%B8%A1.png&#34; alt=&#34;过渡黑白图&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后就能得出从左到右逐渐消失的效果。&lt;/p&gt;
&lt;p&gt;其实和PS的蒙版可以说是一样的。&lt;/p&gt;
&lt;p&gt;注意：上面的的70%等表示位置的是以元素的框的大小为标准的（这个框可以在F12里面看），不是以文字的长度为标准的。&lt;/p&gt;
&lt;h1 id=&#34;补充&#34;&gt;补充&lt;/h1&gt;
&lt;p&gt;MDN上面的方法是没有&lt;code&gt;-webkit&lt;/code&gt;前缀的，暂时不清楚为什么。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000022493842&#34;&gt;css div怎么渐变到透明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient/linear-gradient&#34;&gt;MDN linear-gradient()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/css%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E6%B8%90%E5%8F%98%E6%B6%88%E5%A4%B1/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Git彻底删除历史中的大文件</title>
        <link>https://hxxxer.github.io/git%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E4%B8%AD%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6/</link>
        <pubDate>Tue, 12 Nov 2024 17:00:34 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/git%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E4%B8%AD%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6/</guid>
        <description>闲碎 https://hxxxer.github.io/git%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E4%B8%AD%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月12日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在搞go+fyne移植一个net项目时，不小心把一个检测fyne是否已经配置好的&lt;code&gt;Fyne Setup.exe&lt;/code&gt;给提交了，过了几次提交才发现，所以就要删除。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;为了通用性考虑，记录就从寻找大文件开始。&lt;/p&gt;
&lt;p&gt;下面的命令都是在git bash里面执行。&lt;/p&gt;
&lt;h1 id=&#34;找出大文件&#34;&gt;找出大文件&lt;/h1&gt;
&lt;p&gt;运行下面的命令列出文件大小的top10：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rev-list --all | xargs -rL1 git ls-tree -r --long | sort -uk3 | sort -rnk4 | head -10
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面的命令也可以，这个是列出全部文件的大小，和上面相反，是升序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rev-list --objects --all &lt;span style=&#34;color:#8caaee&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;&lt;/span&gt;| git cat-file --batch-check&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;%(objecttype) %(objectname) %(objectsize) %(rest)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;&lt;/span&gt;| sed -n &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;s/^blob //p&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;&lt;/span&gt;| sort --numeric-sort --key&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;&lt;/span&gt;| cut -c 1-12,41- &lt;span style=&#34;color:#8caaee&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;&lt;/span&gt;| &lt;span style=&#34;color:#ca9ee6&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#99d1db&#34;&gt;command&lt;/span&gt; -v gnumfmt &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#99d1db&#34;&gt;echo&lt;/span&gt; numfmt&lt;span style=&#34;color:#ca9ee6&#34;&gt;)&lt;/span&gt; --field&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;2&lt;/span&gt; --to&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;iec-i --suffix&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;B --padding&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ef9f76&#34;&gt;7&lt;/span&gt; --round&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;nearest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;移除commit中文件的引用&#34;&gt;移除commit中文件的引用&lt;/h1&gt;
&lt;p&gt;该命令仅仅只是移除commit中对某文件的引用,如果某次commit同时提交了要删除的文件和要保留的文件，该命令只会移除要删除文件的引用，并不会移除要保留的文件和当次commit记录，所以无需担心会把不该删除的文件删掉了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git filter-branch --force --prune-empty --index-filter &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;git rm -rf --cached --ignore-unmatch 文件路径/文件名&amp;#39;&lt;/span&gt; --tag-name-filter cat -- --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我在这一步怎么都删除不了，应该是因为我的文件名带空格，不过考虑到exe文件就这一个，我就用&lt;code&gt;*.exe&lt;/code&gt;代替了。&lt;/p&gt;
&lt;h1 id=&#34;删除指向旧提交的指针&#34;&gt;删除指向旧提交的指针&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf .git/refs/original/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;让历史记录全部过期&#34;&gt;让历史记录全部过期&lt;/h1&gt;
&lt;p&gt;设置所有未关联对象过期时间为现在，默认为90天。&lt;/p&gt;
&lt;p&gt;目的是放弃所有未关联对象恢复的可能性，因为reflog 是找寻它们踪迹的最后途径了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reflog expire --expire&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;now --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;重新打包并删除垃圾文件&#34;&gt;重新打包并删除垃圾文件&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git repack -A -d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git gc --aggressive --prune&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt;now
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;强制推送到远程&#34;&gt;强制推送到远程&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push --force --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;最后&#34;&gt;最后&lt;/h1&gt;
&lt;p&gt;如果这个项目有其他人，那大家都要在强制推送之后clone一下，防止又把垃圾文件push上去。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/fuhua/p/15527023.html&#34;&gt;git项目大小优化笔记,删除历史提交中的大文件 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/HappyRocking/article/details/89313501&#34;&gt;彻底删除git中的较大文件（包括历史提交记录）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/git%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E4%B8%AD%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>C#调用DLL的方法</title>
        <link>https://hxxxer.github.io/c%23%E8%B0%83%E7%94%A8dll%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <pubDate>Mon, 11 Nov 2024 00:29:13 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/c%23%E8%B0%83%E7%94%A8dll%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        <description>闲碎 https://hxxxer.github.io/c%23%E8%B0%83%E7%94%A8dll%E7%9A%84%E6%96%B9%E6%B3%95/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月11日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;之前需要调用dll里面的图标，而调用的函数用的是一个dll的内部的函数，所以这里记录一下调用的两种方法。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;vs的项目引用&#34;&gt;VS的项目引用&lt;/h1&gt;
&lt;p&gt;在VS的方案资源管理器里面（&lt;code&gt;Ctrl+Alt+L&lt;/code&gt;），右键依赖项 - 添加项目引用，然后选择dll文件，例如AddDll.dll（里面有一个ADD类，ADD里面有一个calculate公共方法）。&lt;/p&gt;
&lt;p&gt;之后就可以在依赖项 - 程序集里面看到Add了。&lt;/p&gt;
&lt;p&gt;调用也很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;AddDll&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AddDll.ADD &lt;span style=&#34;color:#ca9ee6&#34;&gt;add&lt;/span&gt; = &lt;span style=&#34;color:#ca9ee6&#34;&gt;new&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#ca9ee6&#34;&gt;add&lt;/span&gt;.calculate(a,b);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;使用dllimport&#34;&gt;使用DllImport&lt;/h1&gt;
&lt;p&gt;在需要引用的函数的上一行添加&lt;code&gt;[DllImport(&amp;quot;user.dll&amp;quot;, ......)]&lt;/code&gt;就行，下面是我调用的获取dll图标函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;[DllImport(&amp;#34;shell32.dll&amp;#34;, CharSet = CharSet.Auto)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;extern&lt;/span&gt; IntPtr ExtractIcon(IntPtr hInst, &lt;span style=&#34;color:#e78284&#34;&gt;string&lt;/span&gt; lpszExeFileName, &lt;span style=&#34;color:#e78284&#34;&gt;int&lt;/span&gt; nIconIndex);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面那个&lt;code&gt;CharSet = CharSet.Auto&lt;/code&gt;是调用字符集，Auto是自动选择合适的。&lt;/p&gt;
&lt;p&gt;下面函数的定义记得加&lt;code&gt;static extern&lt;/code&gt;，以表示这个是一个外部方法实现，它将在运行时解析到指定的非托管代码。&lt;/p&gt;
&lt;p&gt;这个方法需要知道dll内部的函数及其形参。&lt;/p&gt;
&lt;h2 id=&#34;补充其它的dllimportattribute属性&#34;&gt;补充其它的DllImportAttribute属性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EntryPoint=&amp;quot;MessageBoxA&amp;quot;&lt;/code&gt;，这个可以也指定函数，这样下面的函数引用就可以用别的名字，但是注意这个EntryPoint赋值和下面的函数引用不一定相同，比如上面的&lt;code&gt;ExtractIcon&lt;/code&gt;，在EntryPoint里面应该是&lt;code&gt;ExtractIconW&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExactSpelling&lt;/code&gt; 指示 &lt;code&gt;EntryPoint&lt;/code&gt; 是否必须与指示的入口点的拼写完全匹配，如：&lt;code&gt;ExactSpelling=false&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PreserveSig&lt;/code&gt;指示方法的签名应当被保留还是被转换， 如：&lt;code&gt;PreserveSig=true&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SetLastError&lt;/code&gt; 指示方法是否保留 Win32&amp;quot;上一错误&amp;quot;，如：&lt;code&gt;SetLastError=true&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CallingConvention&lt;/code&gt;指示入口点的调用约定， 如：&lt;code&gt;CallingConvention=CallingConvention.Winapi&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/Im-Victor/p/14708695.html&#34;&gt;C#调用DLL的几种方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/wangnaisheng/article/details/142462074&#34;&gt;【C#】DllImport的使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_43069920/article/details/123100601&#34;&gt;VS2022 C#编写DLL和调用外部DLL中的方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/c%23%E8%B0%83%E7%94%A8dll%E7%9A%84%E6%96%B9%E6%B3%95/ - This is a customized copyright.</description>
        </item>
    
    
  </channel>
</rss> 