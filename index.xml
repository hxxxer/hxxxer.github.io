<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>闲碎</title>
    <link>https://hxxxer.github.io/</link>
    <description>Recent content on 闲碎</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Fri, 08 Nov 2024 01:53:42 +0800</lastBuildDate>
    
        <atom:link href="https://hxxxer.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>NET使用Github Actions</title>
        <link>https://hxxxer.github.io/net%E4%BD%BF%E7%94%A8github-actions/</link>
        <pubDate>Fri, 08 Nov 2024 01:53:42 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/net%E4%BD%BF%E7%94%A8github-actions/</guid>
        <description>闲碎 https://hxxxer.github.io/net%E4%BD%BF%E7%94%A8github-actions/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月08日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;早就知道GitHub actions很方便好用，所以我想搞一个。不过遇到了好多困难，现在基本搞定了，记录一下。&lt;/p&gt;
&lt;p&gt;主要的难点是yml文件的编写，毕竟是第一次接触，脑子有点混。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;新建工作流&#34;&gt;新建工作流&lt;/h1&gt;
&lt;p&gt;就直接在actions里面新建就行，GitHub有net desktop模板。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;yml文件的理解&#34;&gt;yml文件的理解&lt;/h1&gt;
&lt;p&gt;开头的on是指当发生什么的时候开始这条工作流，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;on&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;push&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;tags&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- v*&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就是在push且tag是以v开头时启动。注意push内的每个条件是或关系，只要满足一个就开始工作。&lt;/p&gt;
&lt;p&gt;然后就是具体工作内容，是一种多级列表，每一级都可以有多个。&lt;/p&gt;
&lt;p&gt;其实工作流程就是大概按顺序运行steps，这里大概是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动系统&lt;/li&gt;
&lt;li&gt;拉取仓库&lt;/li&gt;
&lt;li&gt;安装net core&lt;/li&gt;
&lt;li&gt;net项目初始化依赖&lt;/li&gt;
&lt;li&gt;构建release版本&lt;/li&gt;
&lt;li&gt;压缩成zip&lt;/li&gt;
&lt;li&gt;发布到release&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;感觉就像自动执行指令。&lt;/p&gt;
&lt;h2 id=&#34;steps属性理解&#34;&gt;steps属性理解&lt;/h2&gt;
&lt;p&gt;最末级就是steps，里面的属性有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;，就是名字。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;，非必要，其它地方引用时候用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uses&lt;/strong&gt;，可以选择GitHub上现有的操作，比如获取仓库内容、安装net vore。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;with&lt;/strong&gt;，一般是使用uses时配置具体的参数，比如安装net core时指定版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;run&lt;/strong&gt;，就是执行指令，不同平台（win，Ubuntu）使用的不同&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;env&lt;/strong&gt;，一些变量，通过$env:&amp;lt;名字&amp;gt;，来引用。（好像在一些字符串里面不能被正确解析），比如：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;run&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#cd5555&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;    $zipFilePath = &amp;#34;${{ github.workspace }}\$env:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发布到release&#34;&gt;发布到release&lt;/h2&gt;
&lt;p&gt;这边是重点，我是先搞了一个给这个action用的token，然后再在yml文件里面设定steps。&lt;/p&gt;
&lt;h3 id=&#34;token&#34;&gt;TOKEN&lt;/h3&gt;
&lt;h4 id=&#34;新建token&#34;&gt;新建TOKEN&lt;/h4&gt;
&lt;p&gt;在头像 - &lt;strong&gt;setting&lt;/strong&gt; - 侧边栏的&lt;strong&gt;Developer Settings&lt;/strong&gt; - 侧边栏的&lt;strong&gt;Personal accesskey tokens&lt;/strong&gt; - &lt;strong&gt;Token (classic)&lt;/strong&gt;。然后&lt;strong&gt;generate new token&lt;/strong&gt; - &lt;strong&gt;Generate new token (classic)&lt;/strong&gt;。然后输密码之后，来到新建token的页面，名字随便起，过期时间随便，下面是&lt;strong&gt;Select scopes&lt;/strong&gt;选择前三个。
**
新建完成之后记得复制token，因为只会出现一次，后面要用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/%E9%80%89%E6%8B%A9token%E7%B1%BB%E5%9E%8B.png&#34; alt=&#34;选择token类型&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/%E6%96%B0%E5%BB%BAtoken.png&#34; alt=&#34;新建token&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;新建secrets&#34;&gt;新建secrets&lt;/h4&gt;
&lt;p&gt;刚刚的token要保存到项目的secrets里面。secrets是一种可以在yml里面调用的变量，但是无法得知内容。&lt;/p&gt;
&lt;p&gt;打开项目的&lt;strong&gt;setting&lt;/strong&gt; - 侧边栏的&lt;strong&gt;Secrets and variables&lt;/strong&gt; - &lt;strong&gt;Actions&lt;/strong&gt;。然后选择绿色的&lt;strong&gt;New repository secret&lt;/strong&gt;。接下来就是新建页面，名字随便，记住就行，secret就填刚刚的token。然后保存就行。&lt;/p&gt;
&lt;p&gt;但是还没完，还要配置项目的权限。打开项目的&lt;strong&gt;setting&lt;/strong&gt; - 侧边栏的&lt;strong&gt;Actions&lt;/strong&gt; - &lt;strong&gt;General&lt;/strong&gt;，找到&lt;strong&gt;Workflow permission&lt;/strong&gt;，选择第一个Read and write permissions。到这里就完成了。&lt;/p&gt;
&lt;h4 id=&#34;在yml文件设定发布&#34;&gt;在yml文件设定发布&lt;/h4&gt;
&lt;p&gt;这里我是使用别人的actions和网友的模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Create and Upload Release&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uses&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;softprops/action-gh-release@v2&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;startsWith(github.ref, &amp;#39;refs/tags/&amp;#39;)&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;with&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;token&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${{ secrets.PB_TOKEN }}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;tag_name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${{ github.ref_name }}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Release ${{ github.ref_name }}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;body&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;船新版本！&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;makelatest&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;draft&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;prerelease&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;files&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;|&lt;span style=&#34;color:#cd5555&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;      HugoHelper.zip&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;github.ref_name&lt;/code&gt;就是上传连接的名字，比如我是限制在tags前缀是v时启动工作流，那这里就是v&amp;hellip;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;tag_name&lt;/code&gt;顾名思义，&lt;code&gt;name&lt;/code&gt;就是这次发布的名字，&lt;code&gt;tag_name&lt;/code&gt;就是发布的tag的名字。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;makelatest&lt;/code&gt;就是让这次发布设置为项目的最新release。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000045270503&#34;&gt;学会Github Actions自动发布版本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1970730&#34;&gt;GitHub Action 自动构建 并release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6908427616298991629&#34;&gt;GitHub Actions - 使用 tag 作为发布的版本号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cjavapy.com/article/328/&#34;&gt;.NET Core项目提示找不到project.assets.json文件&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/net%E4%BD%BF%E7%94%A8github-actions/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>VS推送tags</title>
        <link>https://hxxxer.github.io/vs%E6%8E%A8%E9%80%81tags/</link>
        <pubDate>Fri, 08 Nov 2024 01:07:05 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/vs%E6%8E%A8%E9%80%81tags/</guid>
        <description>闲碎 https://hxxxer.github.io/vs%E6%8E%A8%E9%80%81tags/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月08日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;我在GitHub启用了actions，其工作是检测到上传的tags是v开头时，自动构建并发布。但是刚开始不会在vs里面搞。现在搞明白了，记录一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;打标签&#34;&gt;打标签&lt;/h1&gt;
&lt;p&gt;打开位于vs顶栏的git - 管理分支，然后对某一个上传记录右键 - 新建标签。新建完成之后，打开顶栏的视图 - git更改，然后在git更改窗口的分支那一栏，打开右边的选项（三个点） - 将所有标签推送到 - origin。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/VS%E7%AE%A1%E7%90%86%E5%88%86%E6%94%AF.png&#34; alt=&#34;管理分支&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/VS%E6%8E%A8%E9%80%81tags.png&#34; alt=&#34;推送tags&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/71379079/visual-studio-2022-git-push-tags&#34;&gt;Visual Studio 2022 Git Push Tags&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/vs%E6%8E%A8%E9%80%81tags/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Ubuntu新建开机服务</title>
        <link>https://hxxxer.github.io/linux%E6%96%B0%E5%BB%BA%E5%BC%80%E6%9C%BA%E6%9C%8D%E5%8A%A1/</link>
        <pubDate>Wed, 06 Nov 2024 22:36:41 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/linux%E6%96%B0%E5%BB%BA%E5%BC%80%E6%9C%BA%E6%9C%8D%E5%8A%A1/</guid>
        <description>闲碎 https://hxxxer.github.io/linux%E6%96%B0%E5%BB%BA%E5%BC%80%E6%9C%BA%E6%9C%8D%E5%8A%A1/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月06日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在搞VBox的共享文件夹的时候，怎么搞都不能在开机的时候自动挂载，包括安装增强功能，指定目录开启自动挂载，这些都不行。最后直接祭出杀器，新建一个开机服务。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;法一使用etcrclocal&#34;&gt;法一：使用&lt;code&gt;/etc/rc.local&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;因为这个方法是很传统的方法，在新版本的Ubuntu已经不推荐了，但是可能用得上，记录一下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开或新建&lt;code&gt;/etc/rc.local&lt;/code&gt;文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在文件中添加挂载命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;/bin/mount -t vboxsf shared /home/hx/Desktop/shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给予&lt;code&gt;+x&lt;/code&gt;权限。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;法二使用服务单元文件推荐&#34;&gt;法二：使用服务单元文件（推荐）&lt;/h1&gt;
&lt;p&gt;这个方法在新版Ubuntu中更为推荐，因为可操纵性更强。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建&lt;code&gt;/etc/systemd/system/vbox-mount.service&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写入以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Unit]
Description=vbox mount shared
After=network.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/bin/mount -t vboxsf shared /home/hx/Desktop/shared
User=root

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后重新加载配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后启动服务单元：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl &lt;span style=&#34;color:#658b00&#34;&gt;enable&lt;/span&gt; vbox-mount.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以查看一下启动状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl status vbox-mount.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;内容解释&#34;&gt;内容解释&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;After=network.target&lt;/code&gt;，就是在网路服务之后再执行，注意不是强制性的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type=oneshot&lt;/code&gt;，只执行一次。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RemainAfterExit=yes&lt;/code&gt;，执行退出之后仍然认为服务活跃，这是为了依赖这项服务的服务能正常运行（虽然这里没有）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WantedBy=multi-user.target&lt;/code&gt;，在多用户模式下启动？猜测是在开机选用户那里启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;法三使用initd脚本&#34;&gt;法三：使用&lt;code&gt;init.d&lt;/code&gt;脚本&lt;/h1&gt;
&lt;p&gt;这个和法一一样不常用了，但我是松鼠😋！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建启动脚本&lt;code&gt;/etc/init.d/myscript&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在文件中添加挂载命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&lt;/span&gt;/bin/mount -t vboxsf shared /home/hx/Desktop/shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给予&lt;code&gt;+x&lt;/code&gt;权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册脚本到启动序列：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo update-rc.d myscript defaults
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;法四使用profile文件&#34;&gt;法四：使用&lt;code&gt;profile&lt;/code&gt;文件&lt;/h1&gt;
&lt;p&gt;就像将&lt;code&gt;arm-linux-gcc&lt;/code&gt;及其库添加到环境变量一样，直接添加命令到&lt;code&gt;~/.profile&lt;/code&gt;或者&lt;code&gt;~/.bashrc&lt;/code&gt;即可&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;全是AI写的😋&lt;/p&gt;
&lt;/blockquote&gt;
- https://hxxxer.github.io/linux%E6%96%B0%E5%BB%BA%E5%BC%80%E6%9C%BA%E6%9C%8D%E5%8A%A1/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>VS NET开发桌面程序的一些小经验</title>
        <link>https://hxxxer.github.io/20241105net%E7%A8%8B%E5%BA%8F/</link>
        <pubDate>Tue, 05 Nov 2024 22:15:00 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/20241105net%E7%A8%8B%E5%BA%8F/</guid>
        <description>闲碎 https://hxxxer.github.io/20241105net%E7%A8%8B%E5%BA%8F/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月05日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;这篇博客就是记录一些提醒自己（包括未来的自己😋）的tips&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;控件改name事件重新绑定&#34;&gt;控件改(Name)，事件重新绑定&lt;/h1&gt;
&lt;p&gt;如上。以按钮为例，新建了一个button1，然后还没改名，不小心双击了，结果就直接新建Click事件了，这时候再改名的话，&lt;code&gt;form1.cs&lt;/code&gt;里面Click事件还是&lt;code&gt;button1_Click&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;结论就是直接改成改名之后的事件名，这时候设计器肯定变成空白了，然后打开随便一个控件或者窗口，什么都行，的属性页，然后选到改动的那个按钮，更改Click事件的绑定函数就行。&lt;/p&gt;
&lt;p&gt;如果设计器还是空白，那就关闭设计器，再打开，根据设计器的报错去设计文件里面更改事件绑定的函数就行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/%E6%9B%B4%E6%94%B9%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%87%BD%E6%95%B0.png&#34; alt=&#34;更改事件绑定函数&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;hr&gt;
- https://hxxxer.github.io/20241105net%E7%A8%8B%E5%BA%8F/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>mini2440的交叉编译环境搭建</title>
        <link>https://hxxxer.github.io/20241105022715/</link>
        <pubDate>Tue, 05 Nov 2024 02:27:17 +0800</pubDate>
        
        <guid>https://hxxxer.github.io/20241105022715/</guid>
        <description>闲碎 https://hxxxer.github.io/20241105022715/ -&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月05日&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;c语言编写的代码需要编译才能运行，在电脑的amd64架构就是使用&lt;code&gt;gcc&lt;/code&gt;来编译。如果想要编译成板子能运行的文件，就需要适配板子的arm架构的编译工具，也就是&lt;code&gt;arm-linux-gcc&lt;/code&gt;，因为和电脑的不同，也叫做交叉编译。&lt;/p&gt;
&lt;p&gt;下面就是我的交叉编译环境的搭建。（因为这篇Blog是在我搭建完成之后写的，可能会有所错漏，文章的尾部添加了评论功能，不过要登录Github）&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;我的环境配置&#34;&gt;我的环境配置&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;win11 64位，21H2，专业版&lt;/li&gt;
&lt;li&gt;虚拟机平台为Oracle VM VirtualBox（VBox），安装映像为Ubuntu 22.04.5&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;配置前准备&#34;&gt;配置前准备&lt;/h1&gt;
&lt;h2 id=&#34;交叉编译工具&#34;&gt;交叉编译工具&lt;/h2&gt;
&lt;p&gt;就资料里面那个&lt;code&gt;arm-linux-gcc-4.4.3.tar.gz&lt;/code&gt;，路径是&lt;code&gt;\FriendlyARM-2440-DVD\Linux\arm-linux-gcc-4.4.3.tar.gz&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;虚拟机配置&#34;&gt;虚拟机配置&lt;/h2&gt;
&lt;p&gt;虚拟机平台可以选择VMware，也可以和我一样。系统就Ubuntu，版本选择LTS版的20、22、24应该都可以。&lt;/p&gt;
&lt;p&gt;打开虚拟机，先确保你可以获取root权限。摁&lt;code&gt;Ctrl+Alt+T&lt;/code&gt;打开终端，输入&lt;code&gt;su&lt;/code&gt;，然后输入密码（看不到但确实在输入），可能是你的开机密码。如果不是，可以百度（你的虚拟机平台）root账户，之类的。因为有的虚拟机平台会新建一个root账户，我的就是。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/VBoxRoot%E7%94%A8%E6%88%B7.png&#34; alt=&#34;进入root用户&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;开始搭建环境&#34;&gt;开始搭建环境&lt;/h1&gt;
&lt;p&gt;以下内容均参考一篇CDSN博客&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，命令均在root权限下执行。&lt;/p&gt;
&lt;h2 id=&#34;解压文件&#34;&gt;解压文件&lt;/h2&gt;
&lt;p&gt;首先通过共享文件夹或者拖文件等方法，将&lt;code&gt;arm-linux-gcc-4.4.3.tar.gz&lt;/code&gt;复制到虚拟机内，并在当前文件夹打开终端，执行解压指令。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo tar xvzf arm-linux-gcc-4.4.3.tar.gz -C/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完成之后会将压缩文件解压到&lt;code&gt;/opt/&lt;/code&gt;内，可以使用&lt;code&gt;cd&lt;/code&gt;和&lt;code&gt;ls&lt;/code&gt;命令去看一下。下面是文件夹树, 我们主要需要的就是文件夹&lt;code&gt;4.4.3&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|opt
|-- FriendlyARM
|   `-- toolschain
|       `-- 4.4.3
|.......
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;复制交叉编译工具到arm&#34;&gt;复制交叉编译工具到arm&lt;/h2&gt;
&lt;p&gt;然后在&lt;code&gt;/usr/local/&lt;/code&gt;下新建一个文件夹&lt;code&gt;arm&lt;/code&gt;，并给权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir /usr/local/arm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod &lt;span style=&#34;color:#b452cd&#34;&gt;777&lt;/span&gt; /usr/local/arm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后将文件夹&lt;code&gt;4.4.3&lt;/code&gt;复制到&lt;code&gt;arm&lt;/code&gt;文件夹。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; /opt/FriendlyARM/toolschain/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cp -r 4.4.3 /usr/local/arm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置环境变量&#34;&gt;配置环境变量&lt;/h2&gt;
&lt;p&gt;环境变量是写在&lt;code&gt;/etc/profile&lt;/code&gt;里面，所以下面的操作可以在终端执行，也可以用文本编辑器。&lt;/p&gt;
&lt;p&gt;终端命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在文件尾部添加两行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;PATH&lt;/span&gt;=&lt;span style=&#34;color:#00688b&#34;&gt;$PATH&lt;/span&gt;:/usr/local/arm/4.4.3/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;=&lt;span style=&#34;color:#00688b&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;:/usr/local/arm/4.4.3/lib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/profile%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84.png&#34; alt=&#34;添加环境变量&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加完之后，使用source命令重新加载配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt; /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完后终端不会有什么输出，以防万一可以重启。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;安装缺失的库&#34;&gt;安装缺失的库&lt;/h1&gt;
&lt;p&gt;在执行完上面的操作之后，理论上&lt;code&gt;arm-linux-gcc&lt;/code&gt;就安装完成了，但是事实上还没完，因为这个交叉编译工具非常老，是为32位系统做的，而现在的系统基本都是64位，所以需要补装一些32位的库。&lt;/p&gt;
&lt;p&gt;由于我的虚拟机已经安装好了，所以无法复现，但是可以根据报错来安装缺失的32位库。先在终端输入命令检测版本，如果没有库是缺失的话，是可以正常输出的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arm-linux-gcc -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://hxxxer.github.io/images/arm-linux-gcc%E6%A3%80%E6%9F%A5%E7%89%88%E6%9C%AC%E6%AD%A3%E5%B8%B8%E8%BE%93%E5%87%BA.png&#34; alt=&#34;正常输出&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果没有安装好32位的库，就会报错（下面不是原始的报错，是我网上找到报错信息的重点，但格式相差不大）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重点是&lt;strong&gt;libstdc++.so.6&lt;/strong&gt;，根据这个来安装合适的32位版本的库，以防万一，64位也一起安装（其实一般64位版本是预安装的）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install libstdc++6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install lib32stdc++6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到32位就是在&lt;code&gt;lib&lt;/code&gt;后面加&lt;code&gt;32&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果安装失败，可以拿报错去百度搜一下。&lt;/p&gt;
&lt;p&gt;接下来就是不断重复&lt;code&gt;arm-linux-gcc -v&lt;/code&gt;、看报错、&lt;code&gt;sudo apt-get install lib...&lt;/code&gt;、&lt;code&gt;sudo apt-get install lib32...&lt;/code&gt;，直至看到正常输出了。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;hr&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_43734095/article/details/104941659&#34;&gt;【嵌入式】Linux开发工具arm-linux-gcc安装及使用&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://hxxxer.github.io/20241105022715/ - This is a customized copyright.</description>
        </item>
    
    
  </channel>
</rss> 