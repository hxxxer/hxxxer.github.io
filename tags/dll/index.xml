<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dll on 闲碎</title>
    <link>https://hxxxer.github.io/tags/dll/</link>
    <description>Recent content in Dll on 闲碎</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Mon, 11 Nov 2024 00:29:13 +0800</lastBuildDate>
    <atom:link href="https://hxxxer.github.io/tags/dll/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#调用DLL的方法</title>
      <link>https://hxxxer.github.io/c%23%E8%B0%83%E7%94%A8dll%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 11 Nov 2024 00:29:13 +0800</pubDate>
      <guid>https://hxxxer.github.io/c%23%E8%B0%83%E7%94%A8dll%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月11日&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;之前需要调用dll里面的图标，而调用的函数用的是一个dll的内部的函数，所以这里记录一下调用的两种方法。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;vs的项目引用&#34;&gt;VS的项目引用&lt;/h1&gt;&#xA;&lt;p&gt;在VS的方案资源管理器里面（&lt;code&gt;Ctrl+Alt+L&lt;/code&gt;），右键依赖项 - 添加项目引用，然后选择dll文件，例如AddDll.dll（里面有一个ADD类，ADD里面有一个calculate公共方法）。&lt;/p&gt;&#xA;&lt;p&gt;之后就可以在依赖项 - 程序集里面看到Add了。&lt;/p&gt;&#xA;&lt;p&gt;调用也很简单：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;AddDll&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AddDll.ADD &lt;span style=&#34;color:#ca9ee6&#34;&gt;add&lt;/span&gt; = &lt;span style=&#34;color:#ca9ee6&#34;&gt;new&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;int&lt;/span&gt; c = &lt;span style=&#34;color:#ca9ee6&#34;&gt;add&lt;/span&gt;.calculate(a,b);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;使用dllimport&#34;&gt;使用DllImport&lt;/h1&gt;&#xA;&lt;p&gt;在需要引用的函数的上一行添加&lt;code&gt;[DllImport(&amp;quot;user.dll&amp;quot;, ......)]&lt;/code&gt;就行，下面是我调用的获取dll图标函数：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;[DllImport(&amp;#34;shell32.dll&amp;#34;, CharSet = CharSet.Auto)]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;extern&lt;/span&gt; IntPtr ExtractIcon(IntPtr hInst, &lt;span style=&#34;color:#e78284&#34;&gt;string&lt;/span&gt; lpszExeFileName, &lt;span style=&#34;color:#e78284&#34;&gt;int&lt;/span&gt; nIconIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后面那个&lt;code&gt;CharSet = CharSet.Auto&lt;/code&gt;是调用字符集，Auto是自动选择合适的。&lt;/p&gt;&#xA;&lt;p&gt;下面函数的定义记得加&lt;code&gt;static extern&lt;/code&gt;，以表示这个是一个外部方法实现，它将在运行时解析到指定的非托管代码。&lt;/p&gt;&#xA;&lt;p&gt;这个方法需要知道dll内部的函数及其形参。&lt;/p&gt;&#xA;&lt;h2 id=&#34;补充其它的dllimportattribute属性&#34;&gt;补充其它的DllImportAttribute属性&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;EntryPoint=&amp;quot;MessageBoxA&amp;quot;&lt;/code&gt;，这个可以也指定函数，这样下面的函数引用就可以用别的名字，但是注意这个EntryPoint赋值和下面的函数引用不一定相同，比如上面的&lt;code&gt;ExtractIcon&lt;/code&gt;，在EntryPoint里面应该是&lt;code&gt;ExtractIconW&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ExactSpelling&lt;/code&gt; 指示 &lt;code&gt;EntryPoint&lt;/code&gt; 是否必须与指示的入口点的拼写完全匹配，如：&lt;code&gt;ExactSpelling=false&lt;/code&gt;；&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;PreserveSig&lt;/code&gt;指示方法的签名应当被保留还是被转换， 如：&lt;code&gt;PreserveSig=true&lt;/code&gt;；&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SetLastError&lt;/code&gt; 指示方法是否保留 Win32&amp;quot;上一错误&amp;quot;，如：&lt;code&gt;SetLastError=true&lt;/code&gt;；&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CallingConvention&lt;/code&gt;指示入口点的调用约定， 如：&lt;code&gt;CallingConvention=CallingConvention.Winapi&lt;/code&gt;；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/Im-Victor/p/14708695.html&#34;&gt;C#调用DLL的几种方法&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/wangnaisheng/article/details/142462074&#34;&gt;【C#】DllImport的使用&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_43069920/article/details/123100601&#34;&gt;VS2022 C#编写DLL和调用外部DLL中的方法&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>C#获取文件的图标</title>
      <link>https://hxxxer.github.io/net%E8%8E%B7%E5%8F%96dll%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87/</link>
      <pubDate>Sat, 09 Nov 2024 16:24:42 +0800</pubDate>
      <guid>https://hxxxer.github.io/net%E8%8E%B7%E5%8F%96dll%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87/</guid>
      <description>&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月24日&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;在搞那个快捷方式可视化的net程序时，因为图标列表第一个是百度网盘的图标，而文件夹没有指定图标，就默认第一个。结果就是一堆百度网盘😅。&lt;/p&gt;&#xA;&lt;p&gt;就算指定文件夹节点的图标索引为-1也还是这样，不知道为什么，所以就要搞一个文件夹图标。&lt;/p&gt;&#xA;&lt;p&gt;下面的方法都可以提取可执行文件、DLL 或图标文件里面的图标，但是能提取任意文件的&lt;del&gt;只有方法三&lt;/del&gt;，现在有方法三和方法五了。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;方法一&#34;&gt;方法一&lt;/h1&gt;&#xA;&lt;p&gt;主要是通过shell32 API的ExtractIcon函数来提取，然后文件夹图标的索引在shell32.dll里面是3。代码如下&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ca9ee6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#e5c890&#34;&gt;ShellIcon&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8caaee&#34;&gt;    [DllImport(&amp;#34;shell32.dll&amp;#34;, CharSet = CharSet.Auto)]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e78284&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;extern&lt;/span&gt; IntPtr ExtractIcon(IntPtr hInst, &lt;span style=&#34;color:#e78284&#34;&gt;string&lt;/span&gt; lpszExeFileName, &lt;span style=&#34;color:#e78284&#34;&gt;int&lt;/span&gt; nIconIndex);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e78284&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#e78284&#34;&gt;static&lt;/span&gt; Icon? GetFolderIcon(&lt;span style=&#34;color:#e78284&#34;&gt;int&lt;/span&gt; index)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 从shell32.dll提取文件夹图标 (索引3是标准的关闭文件夹图标，从0开始)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IntPtr hIcon = ExtractIcon(IntPtr.Zero, &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;shell32.dll&amp;#34;&lt;/span&gt;, index);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;if&lt;/span&gt; (hIcon != IntPtr.Zero)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ca9ee6&#34;&gt;return&lt;/span&gt; Icon.FromHandle(hIcon);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ca9ee6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ef9f76&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;// 添加文件夹图标&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Icon folderIcon = ShellIcon.GetFolderIcon(&lt;span style=&#34;color:#ef9f76&#34;&gt;3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;if&lt;/span&gt; (folderIcon != &lt;span style=&#34;color:#ef9f76&#34;&gt;null&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imageList1.Images.Add(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;folder&amp;#34;&lt;/span&gt;, folderIcon);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据微软的官网中shell32里面的函数介绍，ExtractIconEx也可以，而且还可以同时获取大小图标，但是使用起来略显麻烦，需要传入图标数组的句柄（说是数组是因为这个函数可以提取多个图标），而且获取完之后要先从句柄创建图标- 复制图标，然后消除句柄。下面是函数的使用例子：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
