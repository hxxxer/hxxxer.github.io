<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自动化 on 闲碎</title>
    <link>https://hxxxer.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/</link>
    <description>Recent content in 自动化 on 闲碎</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Fri, 08 Nov 2024 01:53:42 +0800</lastBuildDate>
    <atom:link href="https://hxxxer.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NET使用Github Actions</title>
      <link>https://hxxxer.github.io/net%E4%BD%BF%E7%94%A8github-actions/</link>
      <pubDate>Fri, 08 Nov 2024 01:53:42 +0800</pubDate>
      <guid>https://hxxxer.github.io/net%E4%BD%BF%E7%94%A8github-actions/</guid>
      <description>&lt;p&gt;&lt;strong&gt;最后编辑于2024年11月09日&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;早就知道GitHub actions很方便好用，所以我想搞一个。不过遇到了好多困难，现在基本搞定了，记录一下。&lt;/p&gt;&#xA;&lt;p&gt;主要的难点是yml文件的编写，毕竟是第一次接触，脑子有点混。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;新建工作流&#34;&gt;新建工作流&lt;/h1&gt;&#xA;&lt;p&gt;就直接在actions里面新建就行，GitHub有net desktop模板。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;yml文件的理解&#34;&gt;yml文件的理解&lt;/h1&gt;&#xA;&lt;p&gt;开头的on是指当发生什么的时候开始这条工作流，比如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;on&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ca9ee6&#34;&gt;push&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ca9ee6&#34;&gt;tags&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - v*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就是在push且tag是以v开头时启动。注意push内的每个条件是或关系，只要满足一个就开始工作。&lt;/p&gt;&#xA;&lt;p&gt;然后就是具体工作内容，是一种多级列表，每一级都可以有多个。&lt;/p&gt;&#xA;&lt;p&gt;其实工作流程就是大概按顺序运行steps，这里大概是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;启动系统&lt;/li&gt;&#xA;&lt;li&gt;拉取仓库&lt;/li&gt;&#xA;&lt;li&gt;安装net core&lt;/li&gt;&#xA;&lt;li&gt;net项目初始化依赖&lt;/li&gt;&#xA;&lt;li&gt;构建release版本&lt;/li&gt;&#xA;&lt;li&gt;压缩成zip&lt;/li&gt;&#xA;&lt;li&gt;发布到release&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;感觉就像自动执行指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;steps属性理解&#34;&gt;steps属性理解&lt;/h2&gt;&#xA;&lt;p&gt;最末级就是steps，里面的属性有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;，就是名字。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;，非必要，其它地方引用时候用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;uses&lt;/strong&gt;，可以选择GitHub上现有的操作，比如获取仓库内容、安装net vore。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;with&lt;/strong&gt;，一般是使用uses时配置具体的参数，比如安装net core时指定版本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;run&lt;/strong&gt;，就是执行指令，不同平台（win，Ubuntu）使用的不同&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;env&lt;/strong&gt;，一些变量，通过$env:&amp;lt;名字&amp;gt;，来引用。（好像在一些字符串里面不能被正确解析），比如：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#737994&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#737994&#34;&gt;    $zipFilePath = &amp;#34;${{ github.workspace }}\$env:&amp;#34;&lt;/span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;发布到release&#34;&gt;发布到release&lt;/h2&gt;&#xA;&lt;p&gt;这边是重点，我是先搞了一个给这个action用的token，然后再在yml文件里面设定steps。&lt;/p&gt;&#xA;&lt;h3 id=&#34;token&#34;&gt;TOKEN&lt;/h3&gt;&#xA;&lt;h4 id=&#34;新建token&#34;&gt;&lt;del&gt;新建TOKEN&lt;/del&gt;&lt;/h4&gt;&#xA;&lt;p&gt;在头像 - &lt;strong&gt;setting&lt;/strong&gt; - 侧边栏的&lt;strong&gt;Developer Settings&lt;/strong&gt; - 侧边栏的&lt;strong&gt;Personal accesskey tokens&lt;/strong&gt; - &lt;strong&gt;Token (classic)&lt;/strong&gt;。然后&lt;strong&gt;generate new token&lt;/strong&gt; - &lt;strong&gt;Generate new token (classic)&lt;/strong&gt;。然后输密码之后，来到新建token的页面，名字随便起，过期时间随便，下面是&lt;strong&gt;Select scopes&lt;/strong&gt;选择前三个。&#xA;**&#xA;新建完成之后记得复制token，因为只会出现一次，后面要用。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
